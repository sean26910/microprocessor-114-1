//
// GPIO_7seg : counting from 0 to 9999 and display on 7-segment LEDs
//
#include <stdio.h>
#include <stdlib.h>
#include "NUC100Series.h"
#include "MCU_init.h"
#include "SYS_init.h"
#include "LCD.h"
#include "Scankey.h"
#include "Seven_Segment.h"
//display an integer on four 7-segment LEDs
enum State{GREEN,YELLOW,RED};
enum gostop{INIT,CAR_GREEN,CAR_YELLOW,CAR_RED,CAR_10RED,CAR_ENDED};
int status = 0,step=0;

unsigned char kirby_go[32*4]={
	0x00,0xFE,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0xF2,0x0A,0x3A,0x02,0xEA,0x02,0xF2,0x0A,0x0A,0x0A,0xF2,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0x02,0xFE,0x00,
	0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x20,0xF9,0x05,0x05,0x05,0x05,0x0C,0x78,0x09,0x19,0x11,0xB0,0x60,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,
	0x00,0xFF,0x00,0x00,0xF8,0x04,0x02,0x02,0x1F,0xE0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x00,0x0E,0x2F,0x80,0x7F,0x10,0x10,0xE0,0x00,0x00,0xFF,0x00,
	0x00,0x7F,0x40,0x40,0x43,0x44,0x44,0x44,0x42,0x41,0x42,0x44,0x44,0x48,0x48,0x48,0x48,0x48,0x48,0x48,0x4C,0x52,0x51,0x50,0x50,0x48,0x46,0x41,0x40,0x40,0x7F,0x00

};

unsigned char kirby_stop[32*4]={
0x00,0xFE,0x02,0x02,0xAA,0x0A,0x2A,0x0A,0x32,0x02,0x7A,0x42,0x52,0x0A,0xF2,0x02,0xF2,0x0A,0x0A,0x0A,0xF2,0x02,0xC2,0x42,0xF2,0x4A,0x4A,0xF2,0x02,0x02,0xFE,0x00,
0x00,0xFF,0x00,0x00,0x01,0x01,0x01,0x01,0x01,0xC0,0x20,0x10,0x10,0x08,0x09,0x88,0x88,0x09,0x89,0x91,0x10,0x20,0xC1,0x00,0x01,0x00,0x00,0x01,0x00,0x00,0xFF,0x00,
0x00,0xFF,0x00,0x00,0x00,0x00,0x78,0x86,0x81,0x80,0x40,0x00,0x08,0x08,0x00,0x0E,0x0F,0x20,0x0E,0x0F,0x00,0x88,0x08,0x03,0x84,0x78,0x00,0x00,0x00,0x00,0xFF,0x00,
0x00,0x7F,0x40,0x40,0x40,0x40,0x4C,0x52,0x51,0x50,0x51,0x51,0x52,0x52,0x54,0x48,0x48,0x58,0x54,0x54,0x52,0x52,0x51,0x51,0x52,0x4C,0x40,0x40,0x40,0x40,0x7F,0x00
};

unsigned char kirby_black_go[128];
unsigned char kirby_black_stop[128];

void flip_vertical(unsigned char *tar,unsigned char *res)
{
	int i;
	for(i=0;i<32*4;i++)
	{
		tar[i] = (res[i]^0xFF);
	}
}

struct TrafficSignal
{
	enum State state;
	enum gostop gostate;
	int timer;
};

void Init_GPIO(void)
{
	GPIO_SetMode(PA, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT14, GPIO_MODE_OUTPUT);
	PA12=1;
	PA13=1;
	PA14=1;
	
	GPIO_SetMode(PC, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT14, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT15, GPIO_MODE_OUTPUT);
	PC12=1;PC13=1;PC14=1;PC15=1;
}

void TrafficSignal_initialize(struct TrafficSignal* ts)
{
	ts->state = YELLOW;
	ts->gostate = INIT;
	ts->timer = 5;
}

void TrafficSignal_countDown(struct TrafficSignal* ts)
{
	ts->timer -= 1;
	if(ts->timer<=0)
	{
		switch(ts->gostate)
		{
			case INIT:
				clear_LCD();
				ts->state = GREEN;
				ts->gostate = CAR_GREEN;
				ts->timer = 5;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				break;
			case CAR_GREEN:
				clear_LCD();
				ts->state = YELLOW;
				ts->gostate = CAR_YELLOW;
				ts->timer = 3;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				break;
			case CAR_YELLOW:
				clear_LCD();
				ts->state = RED;
				ts->gostate = CAR_RED;
				ts->timer = 3;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				break;
			case CAR_RED:
				clear_LCD();
				ts->state = RED;
				ts->gostate = CAR_10RED;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_black_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_go);
				ts->timer = 10;
				break;
			case CAR_10RED:
				clear_LCD();
				ts->state = RED;
				ts->gostate = CAR_ENDED;
				ts->timer = 3;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				break;
			case CAR_ENDED:
				ts->state = YELLOW;
				ts->gostate = INIT;
				ts->timer = 5;
				status=1;
				step=0;
		}
	}
}
void TrafficSignal_showLED(struct TrafficSignal* ts)
{
	if(ts->state == GREEN)
	{
		PA12 = 1;
		PA13 = 0;
		PA14 = 1;
	}
	else if(ts->state == YELLOW)
	{
		PA12 = 1;//blue
		PA13 = 0;//green
		PA14 = 0;//red
	}
	else if(ts->state == RED)
	{
		PA12 = 1;
		PA13 = 1;
		PA14 = 0;
	}
}


void Display_7seg(uint16_t value)
{
  int digit[4] = {0};
	int i,leading = 1,temp = value;
	digit[3] = value/1000;
	value = value%1000;
	digit[2] = value/100;
	value = value%100;
	digit[1] = value/10;
	value = value%10;
	digit[0] = value;

	for(i=3;i>=0;i--)
	{
		CLK_SysTickDelay(2000);
		if(i!=0 && (leading && digit[i]==0))
			continue;
		else
			leading = 0;
		
		CloseSevenSegment();
		ShowSevenSegment(i,digit[i]);
	}
	if(temp==0)
	{
		CloseSevenSegment();
		ShowSevenSegment(0,0);
		CLK_SysTickDelay(2000);
	}
}

int get_key(void)
{
		static int prekey = 0;
		int presentkey = 0,result = 0;
		presentkey = ScanKey();
		CLK_SysTickDelay(1000);
		if(prekey!=0 && presentkey==0)
			result = prekey;
		else
			result = 0;
		prekey = presentkey;
		return result;
}
//enum gostop{INIT,CAR_GREEN,CAR_YELLOW,CAR_RED,CAR_10RED,CAR_ENDED};
void state_machine(struct TrafficSignal* ts,int step)
{
	switch(ts->gostate)
	{
		case INIT:
			Display_7seg(0);
			if(step==0 && status==0)
			{
				clear_LCD();
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				status = (status+1)%2;
				PA12=1;
				PA13=1;
				PA14=1;
			}
			else if(step==0 && status)
			{
				clear_LCD();
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_black_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				status = (status+1)%2;
				TrafficSignal_showLED(ts);
			}
			break;
		case CAR_GREEN:
			Display_7seg(ts->timer);
			TrafficSignal_showLED(ts);
			break;
		case CAR_YELLOW:
			Display_7seg(ts->timer);
			TrafficSignal_showLED(ts);
			break;
		case CAR_RED:
			Display_7seg(ts->timer);
			TrafficSignal_showLED(ts);
			break;
		case CAR_10RED:
			Display_7seg(ts->timer);
			TrafficSignal_showLED(ts);
			break;
		case CAR_ENDED:
			Display_7seg(ts->timer);
			TrafficSignal_showLED(ts);
			break;
	}
}

int main(void)
{
	struct TrafficSignal ts;
	int key,ste=0,mod=50;
	Init_GPIO();
	SYS_Init();
	GPIO_SetMode(PB, BIT11, GPIO_MODE_OUTPUT);
	OpenSevenSegment();
	CloseSevenSegment();
	init_LCD();
	clear_LCD();
	OpenKeyPad();
	flip_vertical(kirby_black_go,kirby_go);
	flip_vertical(kirby_black_stop,kirby_stop);
	TrafficSignal_initialize(&ts);
	while(1)
	{
		if(ts.gostate == INIT)
		{
			mod=50;
			key = get_key();
			if(key==5)
			{
				mod=100;
				clear_LCD();
				ts.gostate = CAR_GREEN;
				ts.state = GREEN;
				draw_Bmp32x32(60,0,FG_COLOR,BG_COLOR,kirby_stop);
				draw_Bmp32x32(60,32,FG_COLOR,BG_COLOR,kirby_black_go);
				step=0;
			}
		}
		state_machine(&ts,step);//«G¨®½ø
		step = (step+1)%mod;
		if(ts.gostate!=INIT && step==0)
			TrafficSignal_countDown(&ts);
		CLK_SysTickDelay(2000);
	}
}
