//
// GPIO_7seg : counting from 0 to 9999 and display on 7-segment LEDs
//
#include <stdio.h>
#include <stdlib.h>
#include "NUC100Series.h"
#include "MCU_init.h"
#include "SYS_init.h"
#include "Seven_Segment.h"
#include "Scankey.h"
//display an integer on four 7-segment LEDs
enum State{GREEN,YELLOW,RED};
struct TrafficSignal
{
	enum State state;
	int greenDuration,yellowDuration,redDuration;
	int timer;
};

void TrafficSignal_initialize(struct TrafficSignal* ts,int greenDuration,int yellowDuration,int redDuration)
{
	ts->state = GREEN;
	ts->greenDuration = greenDuration;
	ts->yellowDuration = yellowDuration;
	ts->redDuration = redDuration;
	ts->timer = greenDuration;
}

void TrafficSignal_countDown(struct TrafficSignal* ts)
{
	ts->timer -= 1;
	if(ts->timer<=0)
	{
		switch(ts->state)
		{
			case GREEN:
				ts->state = YELLOW;
				ts->timer = ts->yellowDuration;
				break;
			case YELLOW:
				ts->state = RED;
				ts->timer = ts->redDuration;
				break;
			case RED:
				ts->state = GREEN;
				ts->timer = ts->greenDuration;
				break;
		}
	}
}

void TrafficSignal_change(int key,struct TrafficSignal* ts)
{
	if(key == 1)
	{
		ts->state = GREEN;
		ts->timer = ts->greenDuration;
	}
	else if(key == 2)
	{
		ts->state = YELLOW;
		ts->timer = ts->yellowDuration;
	}
	else if(key == 3)
	{
		ts->state = RED;
		ts->timer = ts->redDuration;
	}
}

void TrafficSignal_plustime(int key,struct TrafficSignal* ts)
{
	if(key == 9)
		ts->timer+=5;
}

void TrafficSignal_showLED(struct TrafficSignal* ts)
{
	if(ts->state == GREEN)
	{
		PA12 = 1;
		PA13 = 0;
		PA14 = 1;
	}
	else if(ts->state == YELLOW)
	{
		PA12 = 1;
		PA13 = 0;
		PA14 = 0;
	}
	else if(ts->state == RED)
	{
		PA12 = 1;
		PA13 = 1;
		PA14 = 0;
	}
}

void Init_GPIO(void)
{
	GPIO_SetMode(PA, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT14, GPIO_MODE_OUTPUT);
	PA12=1;
	PA13=1;
	PA14=1;
}

void Display_7seg(uint16_t value)
{
  	int digit[4] = {0};
	int i,leading = 1,temp = value;
	digit[3] = value/1000;
	value = value%1000;
	digit[2] = value/100;
	value = value%100;
	digit[1] = value/10;
	value = value%10;
	digit[0] = value;

	for(i=3;i>=0;i--)
	{
		if(i!=0 && (leading && digit[i]==0))
			continue;
		else
			leading = 0;
		
		CloseSevenSegment();
		ShowSevenSegment(i,digit[i]);
		CLK_SysTickDelay(5000);
	}
	if(temp==0)
	{
		CloseSevenSegment();
		ShowSevenSegment(0,0);
		CLK_SysTickDelay(5000);
	}
}

int main(void)
{
	struct TrafficSignal ts;
	int step = 0,key;

	SYS_Init();
    OpenSevenSegment();
	OpenKeyPad();
	Init_GPIO();

	TrafficSignal_initialize(&ts,8,5,13);
	while(1)
	{
		key = Scankey();
		Display_7seg(ts.timer);
		TrafficSignal_showLED(&ts);
		TrafficSignal_change(key,&ts);
		TrafficSignal_plustime(key,&ts);
		step = (step+1)%1000;
		if(step == 0)
			TrafficSignal_countDown(&ts);
	}
}
