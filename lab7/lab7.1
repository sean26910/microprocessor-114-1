//
// LCD_Graph_Pingpong: draw a circle bouncing around between two bars on LCD
//
// EVB : Nu-LB-NUC140
// MCU : NUC140VE3CN
//
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include "Scankey.h"
#include "Seven_Segment.h"
#include <math.h>
#include "NUC100Series.h"
#include "MCU_init.h"
#include "SYS_init.h"
#include "LCD.h"
#include "Draw2D.h"
#define PIXEL_ON  1
#define PIXEL_OFF 0
#define X0 64       // Circle initial X 
#define Y0 32       // Circle initial Y
#define R_BAR_X LCD_Xmax-1 // Right-Bar X-position
#define L_BAR_X 0          // Left-Bar  X-position
enum State{move,stop,end};
struct ballstate
{
	enum State state;
	uint16_t x,y,r;
	int movx,movy,dirx,diry;
};

void Init_GPIO(void)
{
	GPIO_SetMode(PA, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PA, BIT14, GPIO_MODE_OUTPUT);
	PA12=1;
	PA13=1;
	PA14=1;
	
	GPIO_SetMode(PC, BIT12, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT13, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT14, GPIO_MODE_OUTPUT);
	GPIO_SetMode(PC, BIT15, GPIO_MODE_OUTPUT);
	PC12=1;PC13=1;PC14=1;PC15=1;
}

void Buzz(int number)
{
	int i;
	for (i=0; i<number; i++) {
      PB11=0; // PB11 = 0 to turn on Buzzer
	  CLK_SysTickDelay(100000);	 // Delay 
	  PB11=1; // PB11 = 1 to turn off Buzzer	
	  CLK_SysTickDelay(100000);	 // Delay 
	}
}

int key_release(void)
{
		static int prekey = 0;
		int presentkey = 0,result = 0;
		presentkey = ScanKey();
		CLK_SysTickDelay(1000);
		if(prekey!=0 && presentkey==0)
			result = prekey;
		else
			result = 0;
		prekey = presentkey;
		return result;
}

void init_structure(struct ballstate *ts)
{
	ts->state = end;
	ts->x=0;ts->y=32;ts->r=4;
	ts->movx=8;ts->movy=8;ts->dirx=1;ts->diry=0;
}

void mode_change(struct ballstate* ts,int key,int count)
{
	if(ts->state == stop)
	{
		switch(key)
		{
			case 3:
				ts->state = move;
				ts->dirx = 1;
				ts->diry = 0;
		}
	}
	if(key==1 && ts->state==end)
	{
		ts->x = 10;
		ts->y = 32;
		ts->dirx =1;
		ts->diry =0;
		ts->state = move;
		draw_Circle(ts->x,ts->y,ts->r, FG_COLOR, BG_COLOR);
	}
	if(key==2)
	{
		ts->state = stop;
		ts->dirx = 0;
		ts->diry = 0;
	}
	if ((ts->x + ts->r) > R_BAR_X && ts->state!=end) 
	{
		draw_Circle(ts->x,ts->y,ts->r, BG_COLOR, BG_COLOR); // erase a circle
		ts->state = end;
		Buzz(1);
		CLK_SysTickDelay(20000);
		
	}
	if(count==249 && ts->state!=end)
	{
		draw_Circle(ts->x,ts->y,ts->r, BG_COLOR, BG_COLOR);
		ts->x = ts->x + ts->dirx*ts->movx;
		ts->y = ts->y + ts->diry*ts->movy;
		draw_Circle(ts->x,ts->y,ts->r, FG_COLOR, BG_COLOR);
	}
}

int32_t main (void)
{
	int dirX, dirY,count=0;
	int movX, movY;
	uint16_t r,key;
	uint16_t x, y;
	uint16_t fgColor, bgColor;
	struct ballstate ball;
	init_structure(&ball);
	
	Init_GPIO();
	SYS_Init();
	GPIO_SetMode(PB, BIT11, GPIO_MODE_OUTPUT);
	OpenSevenSegment();
	CloseSevenSegment();
	init_LCD();
	clear_LCD();
	OpenKeyPad();
	
	
	bgColor = BG_COLOR;
	while(1) {
		 key = key_release();
		 mode_change(&ball,key,count);
		 count = (count+1)%250;
     CLK_SysTickDelay(2000);
     }
}
